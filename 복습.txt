#Test070 지역변수와 전역변수
- 전역(글로벌) 변수 : 클래스의 영역 / 자바가 자동으로 0으로 초기화 지원
- 지역(로컬) 변수 : 메소드의 영역


#Test072 클래스와 인스턴스-직사각형 클래스 설계 실습
객체를 구성 → 데이터(속성, 상태) + 기능(동작,행위)
    ↓                ↓                  ↓
클래스 설계 →       변수         +     메소드 

- 하나의 자바 파일에는 여러 개의 클래스 설계 가능(일반적으로는 1파일 1클래스)
- 하지만, public class는 하나만 올 수 있음
- 파일을 저장할 때는 public calss의 이름으로 저장!!!!
- 여러 개의 클래스가 설계된 파일 컴파일 하면 클래스 파일만큼 .class 파생


#Test074 클래스와 인스턴스-입력한 수까지의 누적합 구현 실습
자바의 정석 p.231 참고
- 클래스 : 설계도, 객체의 설계도 또는 틀, 객체를 정의해 놓은 것
- 객체 : 클래스에 정의된대로 메모리에 생성된 것
- 인스턴스 : 어떤 클래스로부터 만들어진 객체
- 멤버 : 객체가 가지고 있는 속성과 기능

- 속성 : 멤버변수, 특성, 필드, 상태
- 기능 : 메소드, 함수, 행위

- 인스턴스 생성 : 클래스를 선언한 것은, 설계도를 작성한 것에 불과 -> 인스턴스를 생성해야 사용 가능
클래스명 변수명;
변수명 = new 클래스명();

** 인스턴스는 참조변수를 통해서만 다룰 수 있으며, 참조변수의 타입은 인스턴스의 타입과 일치해야 한다.

#Test076 클래스와 인스턴스-생성자
자바의 정석 p.291 참고
- 생성자 : 인스턴스가 생성될 때 호출되는 '인스턴스 초기화 메소드'
- 생성자의 역할 : 1. 인스턴스 생성 -> 메모리 할당
                  2. 초기화
- 생성자의 특징 : 1. 생성자는 메소드이지만, 일반 메소드처럼 호출될 수 없으며, 반환 자료형을 가질 수 없다.
                  (void조차 가질 수 없으며, 값을 반환할 수도 없다.)
                  2. 생성자는 클래스와 동일한 이름을 가져야 한다. (대소문자 명확히 구분)
                  3. 생성자는 객체를 생성하는 과정에서 new생성자(); 의 형태로 호출된다.
                  (인스턴스 생성 시 단 한 번만 호출)

#Test078 클래스와 인스턴스-생성자, 메소드 오버로딩(중복정의)
자바의 정석 p.283 참고
- 메소드 오버로딩 : 메소드의 기능이 같다 + 구분(식별) 가능 -> 동일한 이름 허용
                    (한 클래스 내에 같은 이름의 메소드를 여러 개 정의하는 것)
- 오버로딩의 조건 : 1. 메소드의 이름이 같다.
                    2. 매개변수의 개수 또는 타입이 다르다.
                    ※ 반환타입은 오버로딩을 구현하는 데 아무런 영향을 주지 못한다.

- this(), this
- 생성자의 이름으로 클래스이름 대신 this를 사용한다.
- 한 생성자에서 다른 생성자를 호출할 때는 반드시 첫 줄에서만 호출이 가능하다.




