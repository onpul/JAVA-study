#Test001
주석 처리

#Test002
자바 기본 프로그래밍
-자바 기본 소스코드 입력 및 컴파일 실습

#Test003
자바의 개요 및 특징

#Test004, #Test005
자바 기본 프로그래밍
-변수와 자료형

#Test006
자바의 개요 및 특징
-변수와 자료형
-키워드 및 식별자

#Test007
-printf()

#Test008
변수와 자료형
-형 변환
-접미사 활용

#Test009
변수와 자료형-변수와 자료형 실습 및 테스트 : boolean

#Test010
변수와 자료형-변수와 자료형 실습 및 테스트 : char

#Test011
변수와 자료형
-변수와 자료형 실습 및 테스트 : double
-나눗셈 연산 실습

#Test012
반지름, 원의 둘레, 원의 넓이

#Test013
직사각형의 넓이와 둘레

#Test014
변수와 자료형
-자바의 기본 입출력: BufferedReader 클래스

#Test015
BufferedReader
br.readLine
Integer.parseInt

#Test016
BufferedReader

#Test017
자바의 기본 입출력: System.in.read()
『\r』과 『\n』

#Test018
자바의 기본 입출력: System.out.printf()

#Test019, Test020, Test021
자바의 기본 입출력: java.util.Scanner

#Test022
실수형 데이터 타입의 정밀도 테스트 실습
-float과 double의 정밀도

#Test023
BufferedReader
printf()

#Test024, Test025
비트 단위 연산자

#Test026
비트 단위 연산자
- 비트 단위 연산자 『xor』연산자를 활용하여
두 변수에 담겨있는 내용(값) 바꾸기

#Test027
비트 단위 연산자

#Test028
논리 연산자

#Test029
조건 연산자 == 삼항 연산자

#Test030
조건 연산자 중첩

#Test031
조건 연산자

---20220110월---

#Test032
윤년 평년 판별

#Test033, Test034, Test035, Test036
if문
if~else문
break: 멈춘다(+그리고 빠져나간다)
continue: (뒷부분 무시하고+)계속해라

#Test037
윤년 평년 판별
- 과제

#Test038
if문
if~else문 실습
- 제대로 작성 못함 다시 확인하기

#Test039
if문
if~else문 실습
작은 수, 큰 수 정렬
크기 비교, 자리 바꿈

---20220111화---

#Test040
실행 흐름의 컨트롤(제어문)
짝수별, 홀수별 합계 출력
- Scanner 활용

#Test041, Test042
과제

자바 도큐먼트 자주 읽어 보기(다운로드 파일에 있음) / 영어 그대로 딱 한 달만 믿고 봐봐~
->> 자연스레 익숙해질 것...

#Test043, Test044, Test045
switch문 실습

#Test046
반복문 실습
- while문
while 반복문: 조건이 틀리면 아예 실행하지 않을 수 있음
              주로 몇 번 반복하는지 명확하지 않을 때 사용
do while 반복문: 일단 한번 잡솨봐? 뱀 탕.. 
                 최소 한 번은 실행이 된다!

#Test047, Test048, Test049, Test050
반복문 실습
- while문 실습

#Test051
반복문 실습
- while문 실습
- 자료형 사용 어려웠음ㅠㅠ 다시 확인

#Test052
- While문 실습

#Test053
- While문 실습
- 마저 해보기

---20220111수---

- 강의장에 추가 설정
1.설정-시스템-시스템항목-전원및절전-시간지나면끄기안함-절전상태전환안함 
2.관련설정-추가전원설정-균형조정 오른쪽에 설정변경-디스플레이 해당없음-컴퓨터 절전모드 설정 해당없음

#Test053
printf는 포맷!
String result="" 선언할 때 값 안 채워 넣어서 오류 났음. 채워 넣기, else값 채워 넣기
while 조건을 만족하지 않으면 while문 실행되지 않음 --> while안에 들어올 수 있는지 확인하고 코드 쓰기
반복문은 한 번이라도 실행을 줄이는 게 리소스 소모가 적다 --> break 활용
boolean flag = true // 임시 값 넣어 놓기

#Test055
★과제★

#Test057
반복문(do~while문) 설명, 실습
do~while: 반드시 한 번은 수행하게 된다!!!
do~while: 불확정성에 놓여있을 때?
얼마나 반복할지 모를 때!!!

#Test058
do~while문 실습
『-1』을 입력 중지 커맨드로 활용
EditPlus 입력 삽입 되는 거 --> INSERT키 누르면 됨ㅋㅋㅋ

#Test061
밖에 있는 for 웅~~~웅~~~
안에 있는 for 쑝쑝쑝~~~~~

#Test063, Test064, Test065, Test066
★과제★

---20220112목---

#Test069
###메소드와 변수의 스코프
main() 메소드 - 중괄호 내에 존재하는 문장들이 위에서 아래로 '순차적' 실행
피아노 옮겨 달래 --> 근데 피아노가 없어 (매개변수가 없어)?????? 

메소드 --> 그림
       --> 기능, 동작, 행위
메소드 정의 --> 메소드 정의, 작성 ....... .... ... ... (정의가 전제되어야 함-->메소드 만들어야 함)
메소드 호출 --> 메소드 사용, 씀, 실행 (call!!!)
            --> hiEveryone(int age) 매개변수, 파라미터, 인자, 인수를 꼭 넘겨줘야 함
            --> 메소드 정의할 때는 괄호 생략 불가능!!!!!
메소드가 자기를 호출한 곳에 값을 반환할 수 있는 방법은 return밖에 없음!!!

void --> 보이드... --> 공허의 ...

###변수의 스코프
-변수의 선언 위치 check~!!!
-선언된 지역을 벗어나면 변수는 자동 소멸된다

###메소드의 재귀호출
재시도, 재시험, 재응시 의 '재'

개발자: 자료구조, 알고리즘은 손에서 놓으면 안 됨...!!! / 언어도 많이 많이 ㅠㅠ / 

재귀: 코드의 복사본이 실행된다고 이해하기

###객체
세상 모든 것...

객체 = 속성 + 기능
       ----   ----
      데이터  동작, 행위
  ↑

설계도
클래스 =  변수 + 메소드(기능, 동작, 행위)
------    ----
설계,정의 선언

- 참조 변수
- 레퍼런스 변수

###생성자
- 인스턴스, 객체를 생성하는 녀석^ㅡ^
- 리턴값 있으면 안 됨
- 생성자도 메소드의 범주 안에 있음
- 인스턴스 생성하는 과정에서 딱 한 번만 불러 쓸 수 있음
- 첫글자를 소문자로 하는 규칙을 위반한다.
--> 클래스 이름과 동일할 수밖에 없어서, 리턴값이 있으면 안돼서!, 리턴 자료형도 키워드도 없어야 한다!!
※ 생성자는 final 변수(즉, 상수화된 변수)를 초기화 할 수 있다.

---20220113목---

#Test075
- Scanner 사용 모르겠어... ㅠㅠ 문자열 어케 받고 출력해?
--> 아직 안 배웠음... op = (char)System.in.read();

---20220117월---
#Test081
- 배열
- 동질의 성격
- 배열의 길이는 고정
         ----
       방의 갯수
- 0번부터 시작

#Test082
※ 배열 arr의 길이(방의 갯수) 확인: arr.length

#Test085,086
**************과제**************


---20220118화---
#Test094,095,096
**************과제**************

---20220119수---

●접근제어 지시자의 관계

지시자   클래스 내부   동일 패키지   상속받은 클래스   이외의 영역
private       O             X               X               X
default       O             O               X               X
protected     O             O               O               X
public        O             O               O               O


---20220120목---

---20220121금---
#Test104
#Test105 메소드 중복정의(Method Overloading), 메소드 오버로딩
#Test106 메소드 중복정의(Method Overloading), 메소드 오버로딩
#Test107 만년달력
#Test108 주민등록번호 유효성 검사

---20220124월---
#Test109 정렬(Sort) 알고리즘
*****다른 알고리즘도 자바로 구현해보기 -> 반복문 익숙, 배열 컨트롤, 정렬 알고리즘 익숙*****

---------------------------------------------20220125화---------------------------------------------

#Test116

●메소드 오버라이딩(Method Overriing)의 특징

- 『static』, 『final』, 『private』 메소드는 오버라이딩(Overriding)할 수 없다.
- 『static』 : 상속 훨씬 이전부터 먼저 로딩과 함께 자리잡았음
- 『final』  : 최종 버전이기 때문에 다른 형태로 수정하지 말아라.  
- 『private』: 접근부터가 불가능!

- Exception 자체도 객체. 

- 변수는 부모, 자식의 메모리가 따로 잡힌다. (이름이 같더라도). 
- 메소드는 부모 거 퍼올린 자리에 덮어쓰기 한 거라 이전의 부모 것으로 되돌릴 수가 없다.
  --> 메소드는 슈퍼 부름이 안 된다.

●추상 클래스

- 추상화~의 추상
- 추상 메소드를 포함하는 클래스(기본 개념)
- 추상 클래스는 미완성 설계도이다.
- 상속을 위한 것!!

- protected는 이미 상속을 염두에 둔 것.


