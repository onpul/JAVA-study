// 2022-02-09 수

// ▶ 객체 직렬화(Object Serialization)

// 개념적인 이해가 훨씬 중요함

// PDA... 그 가스 검침원 사인 받으시는 거... 배달 아저씨 싸인 그거... 그때가 객체 직렬화 활발했대

// 클래스는 하드디스크에...
// 객체를 저장한다 -> 클래스 저장과는 다르다.

// 객체를 보낸다? → 객체를 저장 → 잘게 자르고 → 다시 잘 합치고
// 자를 때 퍼즐 처럼 자르는데 각각 순서 번호를 매김. --> 직렬화!!
// 순서대로 합침 --> 역직렬화

/*-------------------------------------------------------------------------------------------------
○ 객체 직렬화(Object Serialization)는
   
   메모리에 생성된 클래스 객체의 멤버 변수의 현재 상태를
   그대로 보존해서 파일에 저장하거나
   네트워크를 통해 전달할 수 있는 기능으로
   멤버 변수의 값을 보존한다거나
   다른 네트워크에 있는 호스트에 값을 보낼 경우 사용하게 된다.

   즉, 객체 직렬화는 내용물을 바이트 단위로 변환하여   // 내용물: 객체를 구성하는 변수들
   파일 또는 네트워크를 통해 송수신(스트림)이 가능하게
   만들어주는 것으로 이 때, 객체란 멤버 변수의 메모리만으로 구성된 것을 말한다.  // 기록txt 참조

   따라서, 메소드와 생성자는 객체 직렬화의 대상에서 제외된다.   // check~!!!

○ 객체 직렬화의 장점

   객체 자체의 내용을 입출력 형식에 구애받지 않고   // --> 오브젝트 기반으로 처리되니까
   객체를 파일에 저장함으로써 영속성을 제공할 수 있으며   // 영속성 : 컴터 꺼도 존재 --> ex) 데이터베이스
   객체 자체를 네트워크를 통해 손쉽게 교환할 수 있게 된다.

   객체 직렬화는 자바 1.1 이후에 도입되었는데 
   그 이유는 RMI 와 Bean 때문이었다.
   RMI 는 원래 객체 통신을 지원해야 하기 때문에
   객체가 그대로 이동할 수 있어야 한다.
   따라서 이를 지원하기 위해서는 객체 직렬화가 필수적이었다.

   또한, Bean 은 설계 시 상태에 대한 정보를 저장할 때
   이 객체 직렬화를 사용하면 편하게 객체 상태를 저장할 수 있다.

※ RMI(Remote Method Invocation) // 원격 통신?
   서로 다른 가상 기계장치에 존재하는 함수를
   호출하고 실행하는 기능을 담당한다.
   서로 다른 통신 구조에 위치한 각각의 원격 객체들 간의
   통신 구조를 지원하는 개념으로 이해하면 좋겠다.

※ Bean(빈) ★★★★★
   C/S 구조적 모델에서 서버측 구조에 해당하며,
   재사용 가능한 소프트웨어 개체를 만들 수 있게 하는 컴포넌트 기술.
   작성된 개체의 공유가 가능하며 프로젝트에 쉽게 포함시킬 수 있도록 한다.
   클라이언트에게 빈이라는 프로그램 컴포넌트를 분배하는 방식으로 처리.
   // 강사님이 열심히 그린 오디오... 맨 밑 칸 갈아 끼우면 다른 기능 수행
   // 컴포넌트 구성 규칙 (약속) --> Bean

○ Serializable 인터페이스
   
   객체 직렬화를 하기 위해 먼저 객체 직렬화가 가능하도록
   java.io.Serializable 인터페이스를 구현해 주어야 한다.
   이 인터페이스는 객체 직렬화가 제공되어야 한다는 사실을
   JVM 에게 알려주는 역할을 수행한다.
   또한, Serializable 인터페이스는
   다른 인터페이스와 달리 구현해야 할 메소드가 없기 때문에
   단지 선언만 해주면 된다.

   형식)
   ① 
   public class 클래스명 implements Serializable
   {
       // ...
   }

   ②
   Serializable 인터페이스를 구현한 후
   ObjectInputStream 클래스와 ObjectOutputStream 클래스를 이용하여
   객체 단위로 입출력을 수행하게 된다.

   ※ 멤버 변수가 static으로 선언된 경우
      (즉, 클래스 변수일 경우)
	  객체 직렬화의 대상에서 제외된다.

○ Object Stream
   
   java.io.ObjectInputStream
   ObjectInputStream 클래스는 ObjectOutputStream 클래스에 의해
   파일에 저장되어 있는 객체나 네트워크를 통해 전달된 객체의
   직렬화를 히제하는 기능을 제공한다.
   단, java.io.Seralizable 인터페이스와
   java.io.Externalizable 인터페이스를 지원해주는 객체에 대해서만
   사용이 가능하다.
   즉, Serializable 인터페이스와 Externalizable 인터페이스를
   구현한 객체에서만 사용이 가능하다는 것이다.
   이 때, readObject() 메소드를 이용하여
   스트림으로부터 직렬화된 객체를 읽을 수 있으며

   이렇게 읽은 객체는 배열, 문자열 또는 각 객체 등
   원래의 형(Type)으로 캐스팅 해 주어야 한다.  
*/
// 객체를 어딘가에 보내기 위해서, 저장하기 위해서 
// 잘게 쪼개서 저장을 해야 하는데, 이걸 다시 복원해야 하니까
// 순서에 맞게 일련번호를 붙여 가면서 쪼개자  --> 객체 직렬화
// 잘게 잘린 토막들을 다시 잘 합치는 거 --> 객체 역직렬화
//-------------------------------------------------------------------------------------------------
public class Test179
{
	public static void main(String[] args)
	{
		
	}
}